name: Publish Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag for the release'
        required: true
      title:
        description: 'Title of the release'
        required: true
      description:
        description: 'Path to the markdown file for release description'
        default: 'release_descriptions/?.md'
        required: true

permissions:
  contents: write  # Ensures the GITHUB_TOKEN can create releases

jobs:
  create-github-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Read Release Description from Markdown File
        run: |
          if [ -f "${{ github.event.inputs.description }}" ]; then
            description=$(<"${{ github.event.inputs.description }}")
          else
            description="No description provided."
          fi
          echo "DESCRIPTION<<EOF" >> $GITHUB_ENV
          echo "$description" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DESCRIPTION: ${{ env.DESCRIPTION }}
        run: |
          tag="${{ github.event.inputs.tag }}"
          title="${{ github.event.inputs.title }}"
          description="$DESCRIPTION"

          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$(jq -n --arg tag "$tag" --arg title "$title" --arg description "$description" \
                '{tag_name: $tag, target_commitish: "main", name: $title, body: $description, draft: false, prerelease: false}')" \
            https://api.github.com/repos/JEMcats-Software/MAPLE/releases

  upload-to-s3:
    runs-on: ubuntu-latest
    needs: create-github-release  # Ensure this runs after the release is created
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main  # Checkout the 'main' branch

      # Install AWS CLI
      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          aws --version  # Verify installation

      # Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
        

      # Minify JavaScript
      - name: Minify JavaScript
        run: |
          npm install -g terser
          terser js/MAPLE-full.js -o js/MAPLE-full.min.js --compress --mangle

      # Sync contents to S3 bucket while excluding .github folder
      - name: Sync to S3
        run: |
            aws s3 cp js/ s3://cdn.jemcats.software/MAPLE/${{ github.event.inputs.tag }}/js/ --recursive --exclude "examples/*" --exclude "devs.md"
            aws s3 cp assets/dist/ s3://cdn.jemcats.software/MAPLE/${{ github.event.inputs.tag }}/dist/ --recursive
            aws s3 cp assets/icons-png s3://cdn.jemcats.software/MAPLE/${{ github.event.inputs.tag }}/assets/ --recursive --exclude "*" --include "*"
            aws s3 cp webpage/ s3://jemcats.software/websites/MAPLE/ --recursive

      - name: Clear and Publish Latest to S3
        run: |
          aws s3 rm s3://cdn.jemcats.software/MAPLE/latest/ --recursive
          aws s3 cp s3://cdn.jemcats.software/MAPLE/${{ github.event.inputs.tag }}/ s3://cdn.jemcats.software/MAPLE/latest/ --recursive

  publish_npm_package:
    runs-on: ubuntu-latest
    needs: create-github-release  # Ensure this runs after the release is created
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org/'

      - name: Install Dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi
        working-directory: ./nodejs

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_WORKFLOW_TOKEN }}
        run: npm publish --access public
        working-directory: ./nodejs

  build-and-push:
    runs-on: ubuntu-latest
    needs: create-github-release
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: jemcats
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push multi-arch image
        uses: docker/build-push-action@v5
        with:
          context: ./docker
          platforms: linux/amd64,linux/arm64
          push: true
          tags: jemcats/maple:latest